server:
  port: 8087
spring:
  application:
    name: springboot-prometheus-example

management:
  # 自定义 metrics 的暴露地址 端口， 与应用的port分开
  server.port: 8878
  # 这个是端点总开关，必须先设置
  endpoint:
    # 控制health这个是否开启
    health:
      enabled: true
    # 控制 prometheus 是否开启
    prometheus:
      enabled: true
  endpoints:
    web:
      # 以 web.exposure 的形式暴露的端点, 包含那些，排除那些
      exposure:
        include: prometheus,health
        exclude: info,metrics
      # 自定义metrics 的暴露地址
      base-path: /actuator
  metrics:
    web.server:
      request:
        autotime:
          # 自动记录耗时
          enabled: true
        # 控制 HTTP 请求指标（http.server.requests）是否忽略 URL 末尾斜杠的配置项
        ignore-trailing-slash: true
    distribution:
      # 直方图 分位值(不建议使用)
#      percentiles-histogram:
#        casd: true
      percentiles:
        # 指定这个指标  http.server.requests  对应的分位值
        http.server.requests: 0.5,0.9,0.95,0.99
    # 应用收集的指标数据导出到外部监控系统
    export:
      # 允许导出到prometheus
      prometheus:
        enabled: true
        # 使用push-gateway 即主动推送的方式
#        pushgateway:
#          # PushGateway 服务器地址（必填）
#          base-url: http://localhost:9091
#          # 启用 PushGateway 导出
#          enabled: false
#          # 推送频率（默认1分钟）
#          push-rate: 1m
#          # 推送的指标标签（会附加到所有指标上） 标识应用名称，便于 Prometheus 分类
#          job: ${spring.application.name}
#          # 应用关闭时是否推送最终指标
#          shutdown-operation: push
#          # 可添加自定义标签（如实例 ID、环境等），用于区分不同实例
#          grouping-key:
#            instance: ${HOSTNAME:unknown}
    enable:
      jvm: true             # 明确启用 JVM 指标
      http: true            # 明确启用 HTTP 指标
      system: false         # 禁用系统指标
      logback: false        # 禁用 Logback 指标
      tomcat: true         # 明确启用 Tomcat 指标
      hikaricp: true       # 明确启用 HikariCP 指标





#      # 允许导出到   influx
#      influx:
#        enabled: true
#      datadog:
#        enabled: true
#      elastic:
#        enabled: true

application:
  management:
    ignore-uris: /actuator,/health